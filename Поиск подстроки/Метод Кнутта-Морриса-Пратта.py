# Описание функциональности:
# Алгоритм КМП:
# Реализован метод _compute_lps для вычисления префикс-функции (longest prefix suffix)
# Основной поиск выполняется в методе search
# Дополнительные возможности:
# Добавление строк через метод add_text
# Поиск подстроки с учетом всех добавленных строк
# Поддержка пробелов в тексте и шаблоне
# Настройка чувствительности к регистру через set_case_sensitive
# Пример использования:
# Создается объект KMP
# Добавляются несколько текстов
# Пользователь вводит подстроку для поиска
# Выводятся все найденные совпадения с указанием номера текста и позиции
# Чувствительность к регистру:
# По умолчанию можно установить при создании объекта
# Можно изменить в любой момент через set_case_sensitive
# Эта реализация позволяет эффективно искать подстроки даже в больших текстах, так как алгоритм КМП имеет сложность O(n+m), где n - длина текста, m - длина шаблона.
import time


class KMP:
    def __init__(self, case_sensitive=True):
        self.texts = []  # Список для хранения строк
        self.case_sensitive = case_sensitive  # Флаг чувствительности к регистру

    def add_text(self, text):
        """Добавляет текст в список для поиска"""
        self.texts.append(text)

    def _compute_lps(self, pattern):
        """Вычисляет префикс-функцию (longest prefix suffix) для шаблона"""
        lps = [0] * len(pattern)
        length = 0
        i = 1

        while i < len(pattern):
            if pattern[i] == pattern[length]:
                length += 1
                lps[i] = length
                i += 1
            else:
                if length != 0:
                    length = lps[length - 1]
                else:
                    lps[i] = 0
                    i += 1
        return lps

    def search(self, pattern):
        """Ищет подстроку во всех добавленных текстах с замером времени"""
        start_time = time.time()  #Засекаем время начала поиска
        if not self.case_sensitive:
            pattern = pattern.lower()

        lps = self._compute_lps(pattern)
        results = []

        for text_idx, text in enumerate(self.texts):
            if not self.case_sensitive:
                search_text = text.lower()
            else:
                search_text = text

            i = 0  # индекс для текста
            j = 0  # индекс для шаблона
            n = len(search_text)
            m = len(pattern)

            while i < n:
                if pattern[j] == search_text[i]:
                    i += 1
                    j += 1

                if j == m:
                    # Найдено совпадение
                    results.append((text_idx, i - j))
                    j = lps[j - 1]
                elif i < n and pattern[j] != search_text[i]:
                    if j != 0:
                        j = lps[j - 1]
                    else:
                        i += 1

        end_time = time.time()  # Засекаем время окончания поиска
        elapsed_time = end_time - start_time  # Вычисляем затраченное время
        return results, elapsed_time  # Возвращаем результаты и время выполнения

    def set_case_sensitive(self, sensitive):
        """Устанавливает чувствительность к регистру"""
        self.case_sensitive = sensitive


# Пример использования
if __name__ == "__main__":
    kmp = KMP(case_sensitive=False)  # Создаем объект с нечувствительностью к регистру

    # Добавляем тексты
    kmp.add_text("Однажды весною, в час небывало жаркого заката, в Москве, на Патриарших прудах, появились два гражданина. Первый из них, одетый в летнюю серенькую пару, был маленького роста, упитан, лыс, свою приличную шляпу пирожком нес в руке, а на хорошо выбритом лице его помещались сверхъестественных размеров очки в черной роговой оправе. Второй — плечистый, рыжеватый, вихрастый молодой человек в заломленной на затылок клетчатой кепке — был в ковбойке, жеваных белых брюках и в черных тапочках.")
    kmp.add_text("Князь Василий говорил всегда лениво, как актер говорит роль старой пьесы. Анна Павловна Шерер, напротив, несмотря на свои сорок лет, была преисполнена оживления и порывов. Быть энтузиасткой сделалось ее общественным положением, и иногда, когда ей даже того не хотелось, она, чтобы не обмануть ожиданий людей, знавших ее, делалась энтузиасткой. Сдержанная улыбка, игравшая постоянно на лице Анны Павловны, хотя и не шла к ее отжившим чертам, выражала, как у избалованных детей, постоянное сознание своего милого недостатка, от которого она не хочет, не может и не находит нужным исправляться.")
    kmp.add_text("Кречмар вошел в комнату, потирая руки, – не от холода (в доме было душно), а от внутреннего удовольствия, – и сразу же, с порога, устремил взгляд на Бруно, который, откинувшись в кресле, держал перед собой раскрытую книгу, но не читал, а смотрел поверх нее куда-то в пространство, точно сквозь стену, за которой происходило нечто несравненно более интересное, чем печатный текст. Его бледное, чуть одутловатое лицо с влажными глазами и подвижной нижней губой выражало туповатую сосредоточенность человека, пытающегося вспомнить слово, вертящееся на кончике языка.")

    # Ввод подстроки для поиска
    pattern = input("Введите подстроку для поиска: ")

    # Поиск с замером времени
    results, search_time = kmp.search(pattern)

    # Вывод результатов
    if not results:
        print("Подстрока не найдена.")
    else:
        print(f"Найдено {len(results)} совпадений за {search_time} секунд:")
        for text_idx, pos in results:
            print(f"Текст #{text_idx + 1}, позиция {pos}: '{kmp.texts[text_idx][pos:pos + len(pattern)]}'")