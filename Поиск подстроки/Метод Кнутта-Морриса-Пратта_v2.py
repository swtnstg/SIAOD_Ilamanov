import time


class KMP:
    def __init__(self, case_sensitive=True):
        self.texts = []
        self.case_sensitive = case_sensitive

    def add_text(self, text):
        """Добавляет текст в список для поиска"""
        self.texts.append(text)

    def add_user_text(self):
        """Позволяет пользователю ввести текст с клавиатуры"""
        print("\nВведите текст для добавления (для завершения ввода введите пустую строку):")
        lines = []
        while True:
            line = input()
            if line == "":
                break
            lines.append(line)
        user_text = "\n".join(lines)
        if user_text:
            self.add_text(user_text)
            print("Текст успешно добавлен!")
        else:
            print("Не был введен текст для добавления.")

    def _compute_lps(self, pattern):
        """Вычисляет префикс-функцию (longest prefix suffix) для шаблона"""
        lps = [0] * len(pattern)
        length = 0
        i = 1

        while i < len(pattern):
            if pattern[i] == pattern[length]:
                length += 1
                lps[i] = length
                i += 1
            else:
                if length != 0:
                    length = lps[length - 1]
                else:
                    lps[i] = 0
                    i += 1
        return lps

    def search(self, pattern):
        """Ищет подстроку во всех добавленных текстах с замером времени"""
        start_time = time.time()

        if not self.case_sensitive:
            pattern = pattern.lower()

        lps = self._compute_lps(pattern)
        results = []

        for text_idx, text in enumerate(self.texts):
            if not self.case_sensitive:
                search_text = text.lower()
            else:
                search_text = text

            i = 0
            j = 0
            n = len(search_text)
            m = len(pattern)

            while i < n:
                if pattern[j] == search_text[i]:
                    i += 1
                    j += 1

                if j == m:
                    results.append((text_idx, i - j))
                    j = lps[j - 1]
                elif i < n and pattern[j] != search_text[i]:
                    if j != 0:
                        j = lps[j - 1]
                    else:
                        i += 1

        end_time = time.time()
        elapsed_time = end_time - start_time

        return results, elapsed_time

    def set_case_sensitive(self, sensitive):
        """Устанавливает чувствительность к регистру"""
        self.case_sensitive = sensitive


def main():
    kmp = KMP(case_sensitive=False)

    # Добавляем стандартные тексты
    default_texts = [
        "Однажды весною, в час небывало жаркого заката, в Москве, на Патриарших прудах, появились два гражданина. Первый из них, одетый в летнюю серенькую пару, был маленького роста, упитан, лыс, свою приличную шляпу пирожком нес в руке, а на хорошо выбритом лице его помещались сверхъестественных размеров очки в черной роговой оправе. Второй — плечистый, рыжеватый, вихрастый молодой человек в заломленной на затылок клетчатой кепке — был в ковбойке, жеваных белых брюках и в черных тапочках.",
        "Князь Василий говорил всегда лениво, как актер говорит роль старой пьесы. Анна Павловна Шерер, напротив, несмотря на свои сорок лет, была преисполнена оживления и порывов. Быть энтузиасткой сделалось ее общественным положением, и иногда, когда ей даже того не хотелось, она, чтобы не обмануть ожиданий людей, знавших ее, делалась энтузиасткой. Сдержанная улыбка, игравшая постоянно на лице Анны Павловны, хотя и не шла к ее отжившим чертам, выражала, как у избалованных детей, постоянное сознание своего милого недостатка, от которого она не хочет, не может и не находит нужным исправляться.",
        "Кречмар вошел в комнату, потирая руки, – не от холода (в доме было душно), а от внутреннего удовольствия, – и сразу же, с порога, устремил взгляд на Бруно, который, откинувшись в кресле, держал перед собой раскрытую книгу, но не читал, а смотрел поверх нее куда-то в пространство, точно сквозь стену, за которой происходило нечто несравненно более интересное, чем печатный текст. Его бледное, чуть одутловатое лицо с влажными глазами и подвижной нижней губой выражало туповатую сосредоточенность человека, пытающегося вспомнить слово, вертящееся на кончике языка.",
        "Князь Андрей не только знал, что он умрет, но он чувствовал, что он умирает, что он уже умер наполовину, что он испытывал странное отвращение ко всему земному и сознавал радостную и необыкновенную легкость бытия, которая не оставляла его, что он не торопился и не волновался, что он делал и должен был делать что-то очень важное и нужное, важнее и нужнее всего того, что он делал до сих пор, что все люди, которых он видел, все без исключения, независимо от того, как они к нему относились прежде, теперь все казались ему такими хорошими, милыми, прекрасными людьми, что он любил их, жалел и чувствовал, что ему не за что сердиться на них, что ему не за что жалеть о чем-нибудь, что он понимает то, чего прежде не понимал и не мог понять, что он понимает ту истину, которая составляет главное значение жизни, которая всегда была перед ним, но которой он прежде не видел, не понимал, что счастье есть только отсутствие страданий, удовлетворение потребностей и вследствие того свободное проявление всех духовных сил человека, что страдание есть необходимое условие жизни, что страдание происходит не от внешних причин, а от самого человека, что человек всегда свободен, что он всегда может не страдать, если захочет, если поймет, что страдание не есть что-нибудь необходимое и неизбежное, а есть только его собственное создание, его собственное произведение, что он сам делает себя страдающим, когда принимает за действительное то, что не есть действительность, что действительность есть только то, что есть в настоящую минуту, что в настоящую минуту ничего нет дурного, что боль есть только представление, что можно не обращать на нее внимания, что можно не страдать, если не думать о страдании, что человек всегда может быть счастлив, если захочет, если поймет, что счастье в нем самом, что никто и ничто не может сделать его несчастным, если он сам не захочет быть несчастным, что все зависит от него самого, что он свободен, что он может все, что он может быть счастлив, что он может быть бессмертен, что он есть часть вечности, что он есть частица божества, что он есть сын божий, что бог есть любовь, что любить значит жить жизнью бога, что любовь есть бог, что жить для других значит жить жизнью бога, что бог не вне нас, а в нас самих, что мы живем, движемся и существуем в боге, что мы не можем видеть бога, как не можем видеть своего глаза, но знаем, что он есть, как знаем, что есть наш глаз, что мы знаем бога не разумом, а жизнью, что мы знаем его, когда любим, что любовь есть жизнь бога в нас, что чем больше мы любим, тем больше мы приближаемся к богу, тем больше мы сами становимся богами, что любовь к людям есть любовь к богу, что любить врагов есть высшая степень любви, что любить врагов значит любить бога в них, что когда мы любим, мы не можем желать ничего для себя, что когда мы любим, мы не можем сердиться, не можем обижаться, не можем бояться, не можем ненавидеть, что любовь исключает все эти чувства, что любовь есть исполнение закона, что закон весь заключается в одном слове: люби, что любовь есть конец закона, что любовь есть бог, что бог есть любовь."
    ]

    for text in default_texts:
        kmp.add_text(text)

    while True:
        print("\nМеню:")
        print("1. Добавить текст")
        print("2. Поиск подстроки")
        print("3. Изменить чувствительность к регистру")
        print("4. Показать все тексты")
        print("5. Выход")

        choice = input("Выберите действие: ")

        if choice == "1":
            kmp.add_user_text()
        elif choice == "2":
            pattern = input("Введите подстроку для поиска: ")
            results, search_time = kmp.search(pattern)

            if not results:
                print("Подстрока не найдена.")
            else:
                print(f"\nНайдено {len(results)} совпадений за {search_time:.6f} секунд:")
                for text_idx, pos in results:
                    print(f"Текст #{text_idx + 1}, позиция {pos}:")
                    # Показываем контекст вокруг найденного совпадения
                    start = max(0, pos - 20)
                    end = min(len(kmp.texts[text_idx]), pos + len(pattern) + 20)
                    context = kmp.texts[text_idx][start:end]
                    print(f"...{context}...\n")
        elif choice == "3":
            sensitive = input("Чувствительность к регистру (y/n): ").lower() == 'y'
            kmp.set_case_sensitive(sensitive)
            print(f"Чувствительность к регистру {'включена' if sensitive else 'выключена'}")
        elif choice == "4":
            print("\nВсе тексты:")
            for i, text in enumerate(kmp.texts, 1):
                print(f"\nТекст #{i}:")
                print(text[:200] + "..." if len(text) > 200 else text)
        elif choice == "5":
            print("Выход из программы.")
            break
        else:
            print("Неверный выбор. Попробуйте снова.")


if __name__ == "__main__":
    main()