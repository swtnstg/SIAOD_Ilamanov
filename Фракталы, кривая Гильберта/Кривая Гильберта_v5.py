import turtle
import colorsys

#–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
step_count = 0
total_steps = 1
cell_size = 10
draw_mode = "smooth"  # fast / smooth / step
t = None  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è —á–µ—Ä–µ–ø–∞—Ö–∞

#–¶–≤–µ—Ç –ø–æ —Ä–∞–¥—É–≥–µ
def get_rainbow_color(step_index, total_steps):
    hue = step_index / total_steps
    r, g, b = colorsys.hsv_to_rgb(hue, 1, 1)
    return (r, g, b)

#–ó–∞–ª–∏–≤–∫–∞ –∑–æ–Ω—ã
def fill_zone(t, color, size):
    pos = t.pos()
    heading = t.heading()

    t.fillcolor(color)
    t.begin_fill()

    t.penup()
    t.setheading(0)
    t.forward(size / 2)
    t.right(90)
    t.forward(size / 2)
    t.right(90)
    t.pendown()

    for _ in range(4):
        t.forward(size)
        t.right(90)

    t.end_fill()
    t.penup()
    t.goto(pos)
    t.setheading(heading)
    t.pendown()

#–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è
def hilbert(t, level, angle, step, max_level):
    global step_count, total_steps, cell_size

    if level == 0:
        return

    t.right(angle)
    hilbert(t, level - 1, -angle, step, max_level)

    draw_step(t, step)
    t.left(angle)
    hilbert(t, level - 1, angle, step, max_level)

    draw_step(t, step)
    hilbert(t, level - 1, angle, step, max_level)

    t.left(angle)
    draw_step(t, step)
    hilbert(t, level - 1, -angle, step, max_level)
    t.right(angle)

#–û–¥–∏–Ω —à–∞–≥
def draw_step(t, step):
    global step_count, total_steps, draw_mode

    color = get_rainbow_color(step_count, total_steps)
    fill_zone(t, color, cell_size)
    t.pencolor(color)
    t.forward(step)
    step_count += 1

    if draw_mode == "step":
        turtle.update()
    elif draw_mode == "smooth" and step_count % 500 == 0:
        turtle.update()

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —ç–∫—Ä–∞–Ω—É
def click_handler(x, y):
    global draw_mode
    if draw_mode == "fast":
        draw_mode = "smooth"
        print("‚Üí –†–µ–∂–∏–º: smooth")
    elif draw_mode == "smooth":
        draw_mode = "step"
        print("‚Üí –†–µ–∂–∏–º: step")
    else:
        draw_mode = "fast"
        print("‚Üí –†–µ–∂–∏–º: fast")

#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def save_canvas():
    canvas = turtle.getcanvas()
    canvas.postscript(file="hilbert_output.eps")
    print("üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ 'hilbert_output.eps'")

# üé® –ó–∞–ø—É—Å–∫
def draw_hilbert_curve(order, step=10, mode="smooth"):
    global step_count, total_steps, cell_size, draw_mode, t

    step_count = 0
    total_steps = (2 ** order) ** 2 - 1
    cell_size = step
    draw_mode = mode

    screen = turtle.Screen()
    screen.title(f"üåà –ö—Ä–∏–≤–∞—è –ì–∏–ª—å–±–µ—Ä—Ç–∞ ‚Äî –≥–ª—É–±–∏–Ω–∞ {order} (–∫–ª–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞)")
    screen.bgcolor("white")
    turtle.colormode(1.0)
    turtle.tracer(0, 0)

    t = turtle.Turtle()
    t.speed(0)
    t.pensize(2)

    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    size = step * (2 ** order - 1)
    t.penup()
    t.goto(-size // 2, size // 2)
    t.setheading(0)
    t.pendown()

    screen.onclick(click_handler)  # –∫–ª–∏–∫ –ø–æ —ç–∫—Ä–∞–Ω—É ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
    screen.onkey(save_canvas, "s")  # –∫–ª–∞–≤–∏—à–∞ "s" ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    screen.listen()

    hilbert(t, order, 90, step, order)

    t.hideturtle()
    turtle.update()
    screen.mainloop()

# üöÄ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—Å–∫–∞
depth = int(input("–í–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É (1‚Äì6): "))
print("–ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: smooth. –ö–ª–∏–∫–Ω–∏ –ø–æ —ç–∫—Ä–∞–Ω—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å.")
print("–ù–∞–∂–º–∏ 's' –≤–æ –≤—Ä–µ–º—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ .eps")

draw_hilbert_curve(depth, step=10, mode="smooth")
