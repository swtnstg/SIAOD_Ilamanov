import turtle
import colorsys
import time  # –î–ª—è —Ç–∞–π–º–µ—Ä–∞

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
step_count = 0
total_steps = 1
cell_size = 10
draw_mode = "smooth"
t = None
hilbert_calls = 0  # –°—á—ë—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ hilbert

# –†–∞–¥—É–∂–Ω—ã–π —Ü–≤–µ—Ç
def get_rainbow_color(step_index, total_steps):
    hue = step_index / total_steps
    return colorsys.hsv_to_rgb(hue, 1, 1)

# –ó–∞–ª–∏–≤–∫–∞ –∫–ª–µ—Ç–∫–∏ –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
def fill_zone(t, color, size):
    pos = t.pos()
    heading = t.heading()
    t.fillcolor(color)
    t.begin_fill()
    t.penup()
    t.setheading(0)
    t.forward(size / 2)
    t.right(90)
    t.forward(size / 2)
    t.right(90)
    t.pendown()
    for _ in range(4):
        t.forward(size)
        t.right(90)
    t.end_fill()
    t.penup()
    t.goto(pos)
    t.setheading(heading)
    t.pendown()

# –û–¥–∏–Ω —à–∞–≥
def draw_step(t, step, fill_enabled):
    global step_count, total_steps, draw_mode
    color = get_rainbow_color(step_count, total_steps)
    if fill_enabled:
        fill_zone(t, color, cell_size)
    t.pencolor(color)
    t.forward(step)
    step_count += 1
    if draw_mode == "step":
        turtle.update()
    elif draw_mode == "smooth" and step_count % 500 == 0:
        turtle.update()

# –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è –ì–∏–ª—å–±–µ—Ä—Ç–∞
def hilbert(t, level, angle, step, max_level, fill_enabled):
    global hilbert_calls
    hilbert_calls += 1

    if level == 0:
        return
    t.right(angle)
    hilbert(t, level - 1, -angle, step, max_level, fill_enabled)
    draw_step(t, step, fill_enabled)
    t.left(angle)
    hilbert(t, level - 1, angle, step, max_level, fill_enabled)
    draw_step(t, step, fill_enabled)
    hilbert(t, level - 1, angle, step, max_level, fill_enabled)
    t.left(angle)
    draw_step(t, step, fill_enabled)
    hilbert(t, level - 1, -angle, step, max_level, fill_enabled)
    t.right(angle)

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ –∫–ª–∏–∫—É
def click_handler(x, y):
    global draw_mode
    if draw_mode == "fast":
        draw_mode = "smooth"
    elif draw_mode == "smooth":
        draw_mode = "step"
    else:
        draw_mode = "fast"
    print(f"üîÅ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞: {draw_mode}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ EPS
def save_canvas_as_eps():
    canvas = turtle.getcanvas()
    canvas.postscript(file="hilbert_output.eps")
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: hilbert_output.eps")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def draw_hilbert_curve(order, step=None, mode="smooth", fill_enabled=True):
    global step_count, total_steps, cell_size, draw_mode, t, hilbert_calls
    step_count = 0
    hilbert_calls = 0
    total_steps = (2 ** order) ** 2 - 1
    draw_mode = mode

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Å—à—Ç–∞–±
    screen_size = 800
    if step is None:
        step = screen_size // (2 ** order)
    cell_size = step

    turtle.setup(width=screen_size + 50, height=screen_size + 50)
    screen = turtle.Screen()
    screen.title(f"üåà –ö—Ä–∏–≤–∞—è –ì–∏–ª—å–±–µ—Ä—Ç–∞ ‚Äî –≥–ª—É–±–∏–Ω–∞ {order} ‚Äî —Ä–µ–∂–∏–º: {mode}")
    screen.bgcolor("white")
    turtle.colormode(1.0)
    turtle.tracer(0, 0)

    t = turtle.Turtle()
    t.speed(0)
    t.pensize(2)

    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    size = step * (2 ** order - 1)
    t.penup()
    t.goto(-size // 2, size // 2)
    t.setheading(0)
    t.pendown()

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    screen.onclick(click_handler)
    screen.onkey(save_canvas_as_eps, "s")
    screen.listen()

    # –¢–∞–π–º–µ—Ä –Ω–∞—á–∞–ª–∞
    start_time = time.time()

    hilbert(t, order, 90, step, order, fill_enabled)

    # –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    duration = time.time() - start_time
    print(f"‚è± –í—Ä–µ–º—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏: {duration:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üîÅ –í—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ hilbert: {hilbert_calls}")

    t.hideturtle()
    turtle.update()
    screen.mainloop()

# –ó–∞–ø—É—Å–∫
depth = int(input("–í–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É (1‚Äì7): "))
fill_input = input("–í–∫–ª—é—á–∏—Ç—å –∑–∞–ª–∏–≤–∫—É —è—á–µ–µ–∫? (y/n): ").strip().lower()
fill_enabled = fill_input == "y"

print("üñ± –ö–ª–∏–∫ ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ (fast, smooth, step)")
print("üíæ –ù–∞–∂–º–∏ 's' ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ EPS")
draw_hilbert_curve(depth, step=None, mode="smooth", fill_enabled=fill_enabled)